{"version":3,"sources":["brush.svg","copy.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","split","color","temp","setTemp","className","src","logo","placeholder","onChange","e","a","filter","k","toLowerCase","indexOf","target","value","length","map","data-content","style","background","title","copy","onClick","text","parentElement","getAttribute","el","document","createElement","body","appendChild","select","execCommand","removeChild","alert","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,gNC+C5BC,MA1Cf,WACE,IADa,EAGWC,mBAAS,YAFvB,i5CAEgCC,MAAM,OAHnC,mBAGNC,EAHM,aAIWF,mBAASE,IAJpB,mBAINC,EAJM,KAIAC,EAJA,KAKb,OACE,oCACA,wBAAIC,UAAU,SAAQ,yBAAKC,IAAKC,MAAhC,aAAiD,yBAAKD,IAAKC,OAC3D,iFACA,2BAAOC,YAAY,iBAAiBH,UAAU,SAASI,SAAU,SAAAC,GAC/D,IAAIC,EAAIT,EAAMU,QAAO,SAAAC,GAAC,OAA4D,GAAzDA,EAAEC,cAAeC,QAAQL,EAAEM,OAAOC,MAAMH,kBAEjEV,EAAQO,GACK,GAAVA,EAAEO,QAAwC,GAA7BR,EAAEM,OAAOC,MAAMF,QAAQ,MACrCX,EAAQ,CAACM,EAAEM,OAAOC,QACN,GAAVN,EAAEO,QAAwC,GAA7BR,EAAEM,OAAOC,MAAMF,QAAQ,MACtCX,EAAQ,CAAC,sBAGb,yBAAKC,UAAU,OACZF,EAAKgB,KAAI,SAAAT,GACR,OAAO,yBACPL,UAAU,WACVe,eAAcV,EACdW,MAAO,CAACC,WAAWZ,IAElB,yBAAKa,MAAM,oBAAoBjB,IAAKkB,IAAMC,QAAS,SAACf,GAClD,IAAMgB,EAAOhB,EAAEM,OAAOW,cAAcC,aAAa,gBACpDC,EAAKC,SAASC,cAAc,YAClCF,EAAGZ,MAAQS,EACXI,SAASE,KAAKC,YAAYJ,GAC1BA,EAAGK,SACHJ,SAASK,YAAY,QACrBL,SAASE,KAAKI,YAAYP,GAC1BQ,MAAM,GAAD,OAAIX,EAAJ,0BC3BaY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASd,SAASe,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8c9748cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brush.2f3a152c.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy.69ef65c9.svg\";","import React,{useState} from 'react';\n\nimport './App.css';\nimport logo from './brush.svg'\nimport copy from './copy.svg'\nfunction App() {\n  const hues = `AliceBlue:AntiqueWhite:Aqua:Aquamarine:Azure:Beige:Bisque:Black:BlanchedAlmond:Blue:BlueViolet:Brown:BurlyWood:CadetBlue:Chartreuse:Chocolate:Coral:CornflowerBlue:Cornsilk:Crimson:Cyan:DarkBlue:DarkCyan:DarkGoldenRod:DarkGrey:DarkGreen:DarkKhaki:DarkMagenta:DarkOliveGreen:DarkOrange:DarkOrchid:DarkRed:DarkSalmon:DarkSeaGreen:DarkSlateBlue:DarkSlateGray:DarkSlateGrey:DarkTurquoise:DarkViolet:DeepPink:DeepSkyBlue:DimGray:DodgerBlue:FireBrick:FloralWhite:ForestGreen:Fuchsia:Gainsboro:GhostWhite:Gold:GoldenRod:Gray:Green:GreenYellow:HoneyDew:HotPink:IndianRed:Indigo:Ivory:Khaki:Lavender:LavenderBlush:LawnGreen:LemonChiffon:LightBlue:LightCoral:LightCyan:LightGoldenRodYellow:LightGray:LightGrey:LightGreen:LightPink:LightSalmon:LightSeaGreen:LightSkyBlue:LightSlateGrey:LightSteelBlue:LightYellow:Lime:LimeGreen:Linen:Magenta:Maroon:MediumAquaMarine:MediumBlue:MediumOrchid:MediumPurple:MediumSeaGreen:MediumSlateBlue:MediumSpringGreen:MediumTurquoise:MediumVioletRed:MidnightBlue:MintCream:MistyRose:Moccasin:NavajoWhite:Navy:OldLace:Olive:OliveDrab:Orange:OrangeRed:Orchid:PaleGoldenRod:PaleGreen:PaleTurquoise:PaleVioletRed:PapayaWhip:PeachPuff:Peru:Pink:Plum:PowderBlue:Purple:RebeccaPurple:Red:RosyBrown:RoyalBlue:SaddleBrown:Salmon:SandyBrown:SeaGreen:SeaShell:Sienna:Silver:SkyBlue:SlateBlue:SlateGrey:Snow:SpringGreen:SteelBlue:Tan:Teal:Thistle:Tomato:Turquoise:Violet:Wheat:White:WhiteSmoke:Yellow:YellowGreen`\n\n  const [color, setColor]=useState([...hues.split(\":\")]);\n  const [temp, setTemp] = useState(color)\n  return (\n    <>\n    <h1 className=\"title\"><img src={logo}/>HueChooser<img src={logo}/></h1>\n    <h5>Note: Click on The Color For Copying in ClipBoard</h5>\n    <input placeholder=\"Color Name ...\" className=\"search\" onChange={e=>{\n      let a = color.filter(k=>(k.toLowerCase()).indexOf(e.target.value.toLowerCase())!=-1)\n      \n      setTemp(a)\n      if(a.length==0&&e.target.value.indexOf('#')==0){\n        setTemp([e.target.value])\n      }if(a.length==0&&e.target.value.indexOf('#')!=0){\n        setTemp(['ColorNotFound!'])\n      }\n    }}/>\n    <div className=\"App\">\n      {temp.map(e=>{\n        return <div \n        className=\"colorBox\" \n        data-content={e} \n        style={{background:e}}\n        \n        ><img title=\"click for Copied!\" src={copy} onClick={(e)=>{\n           const text = e.target.parentElement.getAttribute('data-content');\n  const el = document.createElement('textarea');\n  el.value = text;\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  document.body.removeChild(el);\n  alert(`${text} is Copied!`)\n        }}/></div>\n      })}\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}