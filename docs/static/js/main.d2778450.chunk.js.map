{"version":3,"sources":["brush.svg","copy.svg","recent.svg","home.svg","close.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","hues","useState","split","color","setColor","temp","setTemp","atHome","setHome","localStorage","setItem","getItem","copyText","e","text","target","parentElement","getAttribute","el","document","createElement","value","body","appendChild","select","execCommand","removeChild","alert","what","recentHue","addToList","className","src","logo","placeholder","onChange","a","filter","k","toLowerCase","indexOf","length","recent","home","onClick","map","data-content","style","background","title","copy","close","hue","join","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAOC,QAAU,IAA0B,mC,kBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gQCgG5BC,MAvFf,WACE,IAAMC,EAAI,i5CADG,EAGWC,mBAAS,YAAID,EAAKE,MAAM,OAHnC,mBAGNC,EAHM,KAGCC,EAHD,OAIWH,mBAASE,GAJpB,mBAINE,EAJM,KAIAC,EAJA,OAKaL,oBAAS,GALtB,mBAKNM,EALM,KAKEC,EALF,KAMbC,aAAaC,QAAQ,OAAOD,aAAaE,QAAQ,SAAS,WAC1D,IASMC,EAAW,SAACC,GAClB,IAAMC,EAAOD,EAAEE,OAAOC,cAAcC,aAAa,gBAC3CC,EAAKC,SAASC,cAAc,YAClCF,EAAGG,MAAQP,EACXK,SAASG,KAAKC,YAAYL,GAC1BA,EAAGM,SACHL,SAASM,YAAY,QACrBN,SAASG,KAAKI,YAAYR,GAC1BS,MAAM,GAAD,OAAIb,EAAJ,gBAjBa,SAACc,GACjB,IAAMC,EAAYpB,aAAaE,QAAQ,SAAS,UAChDF,aAAaC,QAAQ,OAArB,UAA+BmB,EAA/B,YAA4CD,IACxCrB,IACFH,EAASK,aAAaE,QAAQ,QAAQT,MAAM,MAC5CI,EAAQG,aAAaE,QAAQ,QAAQT,MAAM,OAa/C4B,CAAUhB,IAIV,OACE,oCACE,wBAAIiB,UAAU,SAAQ,yBAAKC,IAAKC,MAAhC,aAAiD,yBAAKD,IAAKC,OAC3D,iFAEF,yBAAKF,UAAU,aACb,2BACEG,YAAY,iBACZH,UAAU,SACVI,SAAU,SAAAtB,GACN,IAAIuB,EAAIjC,EAAMkC,QAAO,SAAAC,GAAC,OAA4D,GAAzDA,EAAEC,cAAeC,QAAQ3B,EAAEE,OAAOM,MAAMkB,kBACjEjC,EAAQ8B,GACK,GAAVA,EAAEK,QAAwC,GAA7B5B,EAAEE,OAAOM,MAAMmB,QAAQ,MACrClC,EAAQ,CAACO,EAAEE,OAAOM,QACN,GAAVe,EAAEK,QAAwC,GAA7B5B,EAAEE,OAAOM,MAAMmB,QAAQ,MACtClC,EAAQ,CAAC,sBAInB,yBAAKyB,UAAU,YAAYC,IAAMzB,EAAYmC,IAALC,IAAaC,QAAS,WAAKpC,GAASD,GACxEA,GAIFH,EAASK,aAAaE,QAAQ,QAAQT,MAAM,MAC5CI,EAAQG,aAAaE,QAAQ,QAAQT,MAAM,QAJ3CE,EAASJ,EAAKE,MAAM,MACpBI,EAAQN,EAAKE,MAAM,WAQrB,yBAAK6B,UAAU,OACZ1B,EAAKwC,KAAI,SAAAhC,GACR,OAAO,yBACPkB,UAAU,WACVe,eAAcjC,EACdkC,MAAO,CAACC,WAAWnC,IAGlBN,EAAO,yBAAKwB,UAAU,UAAUkB,MAAM,oBAAoBjB,IAAKkB,IAAMN,QAAS,SAAC/B,GAC7ED,EAASC,MAET,oCAAE,yBAAKkB,UAAU,QAAQC,IAAKmB,IAAOP,QAAS,SAAA/B,GAC7C,IAAMuC,EAAMvC,EAAEE,OAAOC,cAAcC,aAAa,gBAChDX,EAAQD,EAAKgC,QAAQ,SAAAC,GAAC,OAAEA,GAAGc,MAC3B3C,aAAaC,QAAQ,OAAOL,EAAKgC,QAAQ,SAAAC,GAAC,OAAEA,GAAGc,KAAMC,KAAK,iBCtElDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzC,SAAS0C,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d2778450.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brush.2f3a152c.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy.69ef65c9.svg\";","module.exports = __webpack_public_path__ + \"static/media/recent.cf8d16c3.svg\";","module.exports = __webpack_public_path__ + \"static/media/home.e52387a3.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.ec5c8a5f.svg\";","import React,{useState} from 'react';\n\nimport './App.css';\nimport logo from './brush.svg'\nimport copy from './copy.svg'\nimport recent from \"./recent.svg\"\nimport home from \"./home.svg\"\nimport close from \"./close.svg\"\n\nfunction App() {\n  const hues = `AliceBlue:AntiqueWhite:Aqua:Aquamarine:Azure:Beige:Bisque:Black:BlanchedAlmond:Blue:BlueViolet:Brown:BurlyWood:CadetBlue:Chartreuse:Chocolate:Coral:CornflowerBlue:Cornsilk:Crimson:Cyan:DarkBlue:DarkCyan:DarkGoldenRod:DarkGrey:DarkGreen:DarkKhaki:DarkMagenta:DarkOliveGreen:DarkOrange:DarkOrchid:DarkRed:DarkSalmon:DarkSeaGreen:DarkSlateBlue:DarkSlateGray:DarkSlateGrey:DarkTurquoise:DarkViolet:DeepPink:DeepSkyBlue:DimGray:DodgerBlue:FireBrick:FloralWhite:ForestGreen:Fuchsia:Gainsboro:GhostWhite:Gold:GoldenRod:Gray:Green:GreenYellow:HoneyDew:HotPink:IndianRed:Indigo:Ivory:Khaki:Lavender:LavenderBlush:LawnGreen:LemonChiffon:LightBlue:LightCoral:LightCyan:LightGoldenRodYellow:LightGray:LightGrey:LightGreen:LightPink:LightSalmon:LightSeaGreen:LightSkyBlue:LightSlateGrey:LightSteelBlue:LightYellow:Lime:LimeGreen:Linen:Magenta:Maroon:MediumAquaMarine:MediumBlue:MediumOrchid:MediumPurple:MediumSeaGreen:MediumSlateBlue:MediumSpringGreen:MediumTurquoise:MediumVioletRed:MidnightBlue:MintCream:MistyRose:Moccasin:NavajoWhite:Navy:OldLace:Olive:OliveDrab:Orange:OrangeRed:Orchid:PaleGoldenRod:PaleGreen:PaleTurquoise:PaleVioletRed:PapayaWhip:PeachPuff:Peru:Pink:Plum:PowderBlue:Purple:RebeccaPurple:Red:RosyBrown:RoyalBlue:SaddleBrown:Salmon:SandyBrown:SeaGreen:SeaShell:Sienna:Silver:SkyBlue:SlateBlue:SlateGrey:Snow:SpringGreen:SteelBlue:Tan:Teal:Thistle:Tomato:Turquoise:Violet:Wheat:White:WhiteSmoke:Yellow:YellowGreen`\n\n  const [color, setColor]=useState([...hues.split(\":\")]);\n  const [temp, setTemp] = useState(color);\n  const [atHome, setHome] = useState(true)\n  localStorage.setItem('_hue',localStorage.getItem('_hue')||'Histroy')\n  const addToList = (what)=>{\n    const recentHue = localStorage.getItem('_hue')||\"Histroy\";\n    localStorage.setItem('_hue',`${recentHue}:${what}`);\n    if(!atHome){\n      setColor(localStorage.getItem('_hue').split(':'));\n      setTemp(localStorage.getItem('_hue').split(':'))\n    }\n  }\n\n  const copyText = (e) =>{\n  const text = e.target.parentElement.getAttribute('data-content');\n  const el = document.createElement('textarea');\n  el.value = text;\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  document.body.removeChild(el);\n  alert(`${text} is Copied!`)\n  addToList(text)\n  }\n\n \n  return (\n    <>\n      <h1 className=\"title\"><img src={logo}/>HueChooser<img src={logo}/></h1>\n      <h5>Note: Click on The Color For Copying in ClipBoard</h5>\n\n    <div className=\"searchbar\">\n      <input \n        placeholder=\"Color Name ...\" \n        className=\"search\" \n        onChange={e=>{\n            let a = color.filter(k=>(k.toLowerCase()).indexOf(e.target.value.toLowerCase())!=-1)\n            setTemp(a)\n            if(a.length==0&&e.target.value.indexOf('#')==0){\n              setTemp([e.target.value])\n            }if(a.length==0&&e.target.value.indexOf('#')!=0){\n              setTemp(['ColorNotFound!'])\n      }\n    }}/>\n\n    <img className=\"recentBtn\" src={!atHome?home:recent} onClick={()=>{setHome(!atHome)\n    if(!atHome){\n      setColor(hues.split(\":\"))\n      setTemp(hues.split(\":\"))\n    }else{\n      setColor(localStorage.getItem('_hue').split(':'));\n      setTemp(localStorage.getItem('_hue').split(':'))\n    }\n    }}/>\n\n    </div>\n    <div className=\"App\">\n      {temp.map(e=>{\n        return <div \n        className=\"colorBox\" \n        data-content={e} \n        style={{background:e}}\n        \n        >\n       { atHome?<img className=\"copyImg\" title=\"click for Copied!\" src={copy} onClick={(e)=>{\n           copyText(e);\n        }}\n        />:<><img className=\"close\" src={close} onClick={e=>{\n            const hue = e.target.parentElement.getAttribute('data-content');\n            setTemp(temp.filter((k=>k!=hue)));\n            localStorage.setItem('_hue',temp.filter((k=>k!=hue)).join(\":\"));\n        }}/>\n        \n        \n        </>}\n\n        \n        </div>\n      })}\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}